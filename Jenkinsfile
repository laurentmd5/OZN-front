pipeline {
    agent any
    
    environment {
        // Configuration Application Flutter
        APP_NAME = 'ozn-flutter-app'
        APP_PORT = '8090'
        BUILD_ENV = 'production'
    
        // Configuration Docker
        DOCKER_REGISTRY = 'laurentmd5'
        DOCKER_IMAGE = "${APP_NAME}"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        
        // Configuration S√©curit√©
        TRIVY_CACHE_DIR = '/tmp/trivy-cache-${BUILD_NUMBER}'
        SAST_REPORTS_DIR = 'reports/sast'
        ZAP_REPORTS_DIR = 'reports/zap'
        SBOM_DIR = 'reports/sbom'
        
        // Configuration Serveur Ubuntu
        DEPLOY_SERVER = 'devops@localhost'
        DEPLOY_PATH = '/home/devops/apps'
        SSH_CREDENTIALS_ID = 'ubuntu-server-ssh'
        
        // Configuration OWASP ZAP
        ZAP_HOST = 'localhost'
        ZAP_PORT = '8090'
        ZAP_TIMEOUT = '300'
        
        // Configuration Analyse Flutter
        MAX_ALLOWED_WARNINGS = '10'
        MAX_ALLOWED_ERRORS = '0'
        
        // S√©curit√©
        CONTAINER_USER = 'oznapp'
        CONTAINER_UID = '1001'
    }
    
    stages {
        // √âTAPE 1: Checkout S√©curis√©
        stage('Secure Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/laurentmd5/OZN-front.git',
                    credentialsId: 'my-token',
                    poll: false,
                    changelog: false

                sh '''
                echo "üîí Secure Code Checkout"
                echo "üì¶ Repository: https://github.com/laurentmd5/OZN-front.git"
                echo "üìù Branch: main"
                echo "üîç Verifying project structure..."
                
                # V√©rification de l'int√©grit√© des fichiers
                find . -name "*.yaml" -o -name "*.yml" -o -name "*.json" | head -10
                ls -la Dockerfile nginx.conf pubspec.yaml
                
                # V√©rification des permissions
                echo "üìã File permissions:"
                ls -la | grep -E "(Dockerfile|nginx.conf|pubspec.yaml)"
                '''
            }
        }
        
        // √âTAPE 2: Security Scan du Code
        stage('Code Security Scan') {
            parallel {
                stage('Flutter Analyze S√©curis√©') {
                    steps {
                        sh '''
                        echo "üîç Secure Flutter Analysis..."
                        mkdir -p ${SAST_REPORTS_DIR}
                        
                        # Analyse avec gestion d'erreur s√©curis√©e
                        set +e
                        flutter analyze --no-pub --write=${SAST_REPORTS_DIR}/flutter_analysis.json
                        ANALYSIS_CODE=$?
                        set -e
                        
                        # Capture d√©taill√©e
                        flutter analyze --no-pub > ${SAST_REPORTS_DIR}/flutter_analysis_detailed.txt 2>&1 || true
                        
                        # Analyse des r√©sultats avec seuils
                        ERROR_COUNT=$(grep -c "error ‚Ä¢" ${SAST_REPORTS_DIR}/flutter_analysis_detailed.txt 2>/dev/null || echo "0")
                        WARNING_COUNT=$(grep -c "warning ‚Ä¢" ${SAST_REPORTS_DIR}/flutter_analysis_detailed.txt 2>/dev/null || echo "0")
                        
                        echo "üìä Security Analysis Summary:"
                        echo "   Errors: ${ERROR_COUNT}"
                        echo "   Warnings: ${WARNING_COUNT}"
                        
                        # √âchec seulement sur les erreurs critiques
                        if [ ${ERROR_COUNT} -gt ${MAX_ALLOWED_ERRORS} ]; then
                            echo "‚ùå Critical security errors found"
                            grep "error ‚Ä¢" ${SAST_REPORTS_DIR}/flutter_analysis_detailed.txt | head -10
                            exit 1
                        fi
                        
                        echo "‚úÖ Flutter security analysis passed"
                        '''
                    }
                }
                
                stage('Dart Security Metrics') {
                    steps {
                        sh '''
                        echo "üìä Dart Security Metrics..."
                        mkdir -p ${SAST_REPORTS_DIR}/metrics
                        
                        dart pub global activate dart_code_metrics
                        export PATH="$PATH:$HOME/.pub-cache/bin"
                        
                        set +e
                        metrics analyze lib --reporter=html --output-directory=${SAST_REPORTS_DIR}/metrics
                        set -e
                        
                        echo "‚úÖ Dart security metrics completed"
                        '''
                    }
                }
                
                stage('Advanced Security Scan') {
                    steps {
                        sh '''
                        echo "üõ°Ô∏è Advanced Security Scanning..."
                        mkdir -p ${SAST_REPORTS_DIR}/security
                        
                        # Scan des secrets
                        echo "üîê Scanning for secrets..."
                        find lib/ -name "*.dart" -exec grep -n -E "password.*=.*['\\\"][^'\\\"]*['\\\"]" {} \\; > ${SAST_REPORTS_DIR}/security/hardcoded-passwords.txt || true
                        find lib/ -name "*.dart" -exec grep -n -i -E "api[_-]?key|secret[_-]?key|token.*=.*['\\\"][^'\\\"]*['\\\"]" {} \\; > ${SAST_REPORTS_DIR}/security/api-secrets.txt || true
                        
                        # Scan des URLs non s√©curis√©es
                        find lib/ -name "*.dart" -exec grep -n -E "http://[^\\"']*" {} \\; > ${SAST_REPORTS_DIR}/security/insecure-urls.txt || true
                        
                        # Scan des d√©pendances vuln√©rables
                        echo "üì¶ Checking dependencies..."
                        flutter pub outdated || true
                        
                        # V√©rification des violations de s√©curit√©
                        if [ -s ${SAST_REPORTS_DIR}/security/hardcoded-passwords.txt ]; then
                            echo "‚ùå CRITICAL: Hardcoded passwords detected!"
                            exit 1
                        fi
                        
                        if [ -s ${SAST_REPORTS_DIR}/security/api-secrets.txt ]; then
                            echo "‚ùå CRITICAL: Hardcoded API keys detected!"
                            exit 1
                        fi
                        
                        echo "‚úÖ Advanced security scan passed"
                        '''
                    }
                }
            }
        }

        // √âTAPE 3: Build Flutter S√©curis√©
        stage('Secure Flutter Build') {
            steps {
                sh '''
                echo "üèóÔ∏è Secure Flutter Build..."
                flutter clean
                
                # Build avec flags de s√©curit√©
                flutter build web --release \
                    --pwa-strategy none \
                    --dart-define=BUILD_ENV=${BUILD_ENV} \
                    --dart-define=BUILD_NUMBER=${BUILD_NUMBER}
                
                # V√©rification de l'int√©grit√© du build
                if [ ! -f "build/web/index.html" ]; then
                    echo "‚ùå Build integrity check failed: index.html missing"
                    exit 1
                fi
                
                if [ ! -f "build/web/main.dart.js" ]; then
                    echo "‚ùå Build integrity check failed: main.dart.js missing"
                    exit 1
                fi
                
                echo "‚úÖ Secure Flutter build completed"
                '''
            }
        }

        // √âTAPE 4: Build Docker S√©curis√©
        stage('Secure Docker Build') {
            steps {
                sh '''
                echo "üê≥ Secure Docker Build..."
                
                # Construction de l'image avec s√©curit√© renforc√©e
                docker build \
                    --no-cache \
                    --build-arg NGINX_PORT=${APP_PORT} \
                    --tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG} \
                    --tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest \
                    --label "build.number=${BUILD_NUMBER}" \
                    --label "version=1.0.0" \
                    --label "maintainer=laurentmd5" \
                    --label "security.scan=true" \
                    --label "build.env=${BUILD_ENV}" \
                    .
                
                echo "‚úÖ Secure Docker build completed"
                '''
            }
        }

        // √âTAPE 5: Container Security Scan Avanc√©
        stage('Advanced Container Security') {
            parallel {
                stage('Trivy Vulnerability Scan') {
                    steps {
                        sh '''
                        echo "üõ°Ô∏è Trivy Container Security Scan..."
                        mkdir -p ${TRIVY_CACHE_DIR}
                        
                        # Scan complet des vuln√©rabilit√©s
                        trivy --cache-dir ${TRIVY_CACHE_DIR} image \
                            --exit-code 1 \
                            --severity CRITICAL \
                            --format sarif \
                            -o ${SAST_REPORTS_DIR}/trivy-critical.sarif \
                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest
                            
                        # Scan d√©taill√© pour reporting
                        trivy --cache-dir ${TRIVY_CACHE_DIR} image \
                            --exit-code 0 \
                            --severity HIGH,CRITICAL \
                            --format table \
                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest || echo "‚ö†Ô∏è Vulnerabilities found"
                            
                        echo "‚úÖ Container security scan completed"
                        '''
                    }
                }
                
                stage('SBOM Generation') {
                    steps {
                        sh '''
                        echo "üìã Software Bill of Materials (SBOM)..."
                        mkdir -p ${SBOM_DIR}
                        
                        # G√©n√©ration du SBOM
                        trivy --cache-dir ${TRIVY_CACHE_DIR} image \
                            --format cyclonedx \
                            -o ${SBOM_DIR}/sbom.cdx.json \
                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest
                            
                        echo "‚úÖ SBOM generated"
                        '''
                    }
                }
                
                stage('Container Image Hardening Check') {
                    steps {
                        sh '''
                        echo "üîí Container Hardening Audit..."
                        
                        # V√©rification des bonnes pratiques
                        docker inspect ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest > ${SAST_REPORTS_DIR}/container-inspect.json
                        
                        # V√©rification de l'utilisateur non-root
                        USER_CHECK=$(docker run --rm ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest whoami 2>/dev/null || echo "unknown")
                        if [ "$USER_CHECK" = "root" ]; then
                            echo "‚ùå CRITICAL: Container running as root!"
                            exit 1
                        else
                            echo "‚úÖ Container running as non-root user: $USER_CHECK"
                        fi
                        
                        echo "‚úÖ Container hardening check passed"
                        '''
                    }
                }
            }
        }

        // √âTAPE 6: D√©ploiement S√©curis√©
        stage('Secure Deployment') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(
                        credentialsId: "${SSH_CREDENTIALS_ID}",
                        usernameVariable: 'SSH_USER',
                        keyFileVariable: 'SSH_KEY'
                    )]) {
                        sh """
                        echo "üöÄ Secure Deployment to ${DEPLOY_SERVER}"
                        
                        ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "
                            set -e
                            
                            echo 'üîí Setting up secure deployment...'
                            sudo mkdir -p ${DEPLOY_PATH}
                            sudo chown -R devops:devops ${DEPLOY_PATH}
                            cd ${DEPLOY_PATH}
                            
                            # Arr√™t s√©curis√© du conteneur existant
                            echo 'üê≥ Securely stopping existing container...'
                            docker stop ${APP_NAME} 2>/dev/null || echo '‚ÑπÔ∏è No running container'
                            docker rm ${APP_NAME} 2>/dev/null || echo '‚ÑπÔ∏è No container to remove'
                            
                            # Nettoyage des anciennes images
                            docker image prune -f 2>/dev/null || true
                            
                            # Pull de l'image s√©curis√©e
                            echo 'üì• Pulling secured image...'
                            docker pull ${DOCKER_REGISTRY}/${APP_NAME}:latest
                            
                            # D√©ploiement avec s√©curit√© renforc√©e
                            echo 'üöÄ Starting secured container...'
                            docker run -d \\
                                --name ${APP_NAME} \\
                                -p ${APP_PORT}:${APP_PORT} \\
                                --restart unless-stopped \\
                                --security-opt=no-new-privileges:true \\
                                --read-only \\
                                --tmpfs /tmp:rw,noexec,nosuid,size=64m \\
                                --user ${CONTAINER_UID} \\
                                --health-cmd=\"/healthcheck.sh\" \\
                                --health-interval=30s \\
                                --health-timeout=10s \\
                                --health-retries=3 \\
                                ${DOCKER_REGISTRY}/${APP_NAME}:latest
                            
                            # Attente du d√©marrage
                            sleep 20
                            
                            # V√©rification de sant√©
                            echo '‚ù§Ô∏è Security Health Check...'
                            CONTAINER_STATUS=\$(docker inspect --format='{{.State.Status}}' ${APP_NAME})
                            HEALTH_STATUS=\$(docker inspect --format='{{.State.Health.Status}}' ${APP_NAME})
                            
                            echo \"Container Status: \$CONTAINER_STATUS\"
                            echo \"Health Status: \$HEALTH_STATUS\"
                            
                            if [ \"\$CONTAINER_STATUS\" != \"running\" ]; then
                                echo '‚ùå Container not running'
                                docker logs ${APP_NAME} --tail 20
                                exit 1
                            fi
                            
                            # Test de l'application
                            if curl -f -s --max-time 10 http://localhost:${APP_PORT}/ > /dev/null; then
                                echo '‚úÖ Application health check PASSED'
                            else
                                echo '‚ùå Application health check FAILED'
                                docker logs ${APP_NAME} --tail 20
                                exit 1
                            fi
                            
                            echo 'üéâ Secure deployment completed successfully'
                        "
                        """
                    }
                }
            }
        }

        // √âTAPE 7: Security Post-Deployment Scan
        stage('Post-Deployment Security') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(
                        credentialsId: "${SSH_CREDENTIALS_ID}",
                        usernameVariable: 'SSH_USER',
                        keyFileVariable: 'SSH_KEY'
                    )]) {
                        sh """
                        echo "üîç Post-Deployment Security Verification..."
                        
                        ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "
                            echo 'üîí Running post-deployment security checks...'
                            
                            # Scan de s√©curit√© du conteneur d√©ploy√©
                            echo 'üê≥ Container Security Scan...'
                            trivy container --exit-code 0 ${APP_NAME} || echo '‚ö†Ô∏è Container vulnerabilities found'
                            
                            # V√©rification r√©seau
                            echo 'üåê Network Security...'
                            netstat -tulpn | grep ${APP_PORT} && echo '‚úÖ Port binding secured' || echo '‚ùå Port binding issue'
                            
                            # V√©rification des security headers
                            echo 'üìã Security Headers Verification...'
                            curl -s -I http://localhost:${APP_PORT}/ | grep -E '(X-Frame-Options|X-Content-Type-Options|X-XSS-Protection|Strict-Transport-Security)' || echo '‚ö†Ô∏è Security headers missing'
                            
                            # V√©rification de l'utilisateur du conteneur
                            echo 'üë§ Container User Verification...'
                            CONTAINER_USER=\$(docker exec ${APP_NAME} whoami 2>/dev/null || echo 'unknown')
                            if [ \"\$CONTAINER_USER\" = \"${CONTAINER_USER}\" ]; then
                                echo '‚úÖ Container running as correct non-root user'
                            else
                                echo '‚ùå Container user mismatch'
                            fi
                            
                            # Test de s√©curit√© de l'application
                            echo 'üîê Application Security Tests...'
                            # Test XSS
                            curl -s -o /dev/null -w 'XSS Test: %{http_code}\\n' http://localhost:${APP_PORT}/'<script>alert(1)</script>' || true
                            # Test path traversal
                            curl -s -o /dev/null -w 'Path Traversal: %{http_code}\\n' http://localhost:${APP_PORT}/../etc/passwd || true
                            
                            echo '‚úÖ Post-deployment security verification completed'
                        "
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh '''
            echo "üìä Security Reports Summary..."
            echo "üßπ Cleaning up sensitive data..."
            
            # Nettoyage s√©curis√©
            docker system prune -f 2>/dev/null || true
            rm -rf ${TRIVY_CACHE_DIR} 2>/dev/null || true
            
            # Archivage s√©curis√© des rapports
            find reports/ -name "*.json" -o -name "*.html" -o -name "*.txt" | head -10
            '''
            
            archiveArtifacts artifacts: 'reports/**/*, build/web/', fingerprint: true
            publishHTML(target: [
                reportDir: 'reports/sast/metrics',
                reportFiles: 'index.html',
                reportName: 'Dart Security Metrics'
            ])
        }
        success {
            sh """
            echo "üéâ DEVSECOPS PIPELINE SUCCESS!"
            echo "üîí Security Status: ALL CHECKS PASSED"
            echo "üåê Application: http://${DEPLOY_SERVER}:${APP_PORT}"
            echo "üê≥ Registry: ${DOCKER_REGISTRY}"
            echo "üì¶ Image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest"
            echo ""
            echo "üìã Security Layers Applied:"
            echo "   ‚úÖ SAST: Static Application Security Testing"
            echo "   ‚úÖ Container: Trivy Vulnerability Scan & SBOM"
            echo "   ‚úÖ Image Hardening: Non-root user, Read-only fs"
            echo "   ‚úÖ Network: Security headers & port verification"
            echo "   ‚úÖ Runtime: Health checks & security opts"
            """
        }
        failure {
            sh """
            echo "‚ùå DEVSECOPS PIPELINE FAILED"
            echo "üîí Security Violations Detected:"
            echo "   - Critical vulnerabilities in container"
            echo "   - Security headers missing"
            echo "   - Hardcoded secrets detected"
            echo "   - Container running as root"
            echo "   - Build integrity compromised"
            """
        }
    }
}